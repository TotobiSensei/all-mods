{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;;;;;ACxDiE;AACpG;AACA;AACA,+BAA+B,4EAAsB;AACrD;AACA;AACA;AACA;AACA,yBAAyB,yEAAmB,oCAAoC,KAAK;AACrF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,kBAAkB,yEAAmB,oCAAoC,MAAM;AAC/E;AACA,IAAI;AACJ,uBAAuB,yEAAmB;AAC1C,yBAAyB,iEAAW;AACpC,IAAI,wBAAwB,4EAAsB;AAClD,uBAAuB,iEAAW;AAClC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB;AACA;;;;;;;;;;;;;;;;;ACnC0F;AACV;AAChF;AACA;AACA;AACA;AACA,4BAA4B,4EAAsB;AAClD,UAAU;AACV,4BAA4B,4EAAsB;AAClD;AACA;AACA,sCAAsC,wDAAa;AACnD,mCAAmC,uDAAY;AAC/C,uCAAuC,2DAAgB;AACvD,iCAAiC,sDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,mCAAmC,iEAAW;AAC9C,cAAc;AACd,qCAAqC,iEAAW;AAChD,cAAc;AACd,oCAAoC,iEAAW;AAC/C,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU;;;;;;;;;;;;;;;;;;AC1CwC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mDAAmD;AACpG,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACqE;;;;;;;;;;;;;;;AC7KrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;;;;;AC/CyC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4EAAsB;AAC5C;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,EAAE,iEAAe,qBAAqB;;;;;;;;;;;;;;;AC3B6B;AACnE;AACA;AACA;AACA;AACA,kBAAkB,4EAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;;;;;;;ACtB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1CY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iEAAgB,OAAO,EAAC;AACxB;;;;;;;UCjFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNwC;AACC;AAC4B;AACZ;AACV;AACe;AACb;AAC2D;AAC5G;AACA;AACA,gCAAgC,iEAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iEAAoB;AAC/F,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAO;AACf,QAAQ,qEAAoB;AAC5B,QAAQ,6DAAO;AACf,QAAQ,2EAAqB;AAC7B,QAAQ,yEAAW;AACnB,QAAQ,gEAAU;AAClB,QAAQ,iEAAW;AACnB;AACA,MAAM;AACN;AACA;AACA;AACA,CAAC;AACD","sources":["webpack:///./assets/js/modules/Up-date-messages.js","webpack:///./assets/js/modules/carusel.js","webpack:///./assets/js/modules/chat-action.js","webpack:///./assets/js/modules/chat-methods.js","webpack:///./assets/js/modules/modal-action.js","webpack:///./assets/js/modules/pagination-replacement.js","webpack:///./assets/js/modules/send-message-methods.js","webpack:///./assets/js/modules/services/error-liblrary.js","webpack:///./assets/js/modules/user_img.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./assets/js/modul-colector.js"],"sourcesContent":["\r\n// Функция, которая отправляет AJAX-запрос для обновления статуса сообщения\r\nfunction updateMessageStatus(messageId) {\r\n    const xhr = new XMLHttpRequest();\r\n    const currentUrl = window.location.href;\r\n\r\n    xhr.open(\"POST\", currentUrl, true); // Замените на URL вашего серверного скрипта\r\n    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n            const response = xhr.responseText;\r\n            if (xhr.status === 200) {\r\n                // Если запрос успешен, изменяем класс на \"checked\"\r\n                console.log(\"ok\")\r\n                const message = document.getElementById(messageId);\r\n                if (message) {\r\n                    const span = message.querySelector(\".unchecked\");\r\n                    if (span) {\r\n                        span.classList.remove(\"unchecked\");\r\n                        span.classList.add(\"checked\");\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Response from server:\", response);\r\n            }\r\n        }\r\n    };\r\n    xhr.send(\"messageId=\" + messageId);\r\n}\r\n\r\n// Функция, которая проверяет видимые сообщения и отправляет AJAX-запросы при скроллинге\r\nfunction checkVisibleMessages() {\r\n    const messageList = document.getElementById(\"message-list\");\r\n    if (!messageList) return; // Проверка на наличие списка сообщений\r\n\r\n    const otherMessages = messageList.querySelectorAll(\".other-message\");\r\n\r\n    otherMessages.forEach(function(otherMessage) {\r\n        const message = otherMessage.querySelector(\".unchecked\");\r\n        if (!message) return; // Пропускаем, если нет span с классом \"unchecked\"\r\n        \r\n        const messageId = otherMessage.id;\r\n        const rect = otherMessage.getBoundingClientRect();\r\n        \r\n\r\n        if (rect.top >= 0 && rect.bottom <= (messageList.clientHeight + messageList.getBoundingClientRect().top)) {\r\n            // Если сообщение видимо в области, отправляем AJAX-запрос\r\n            updateMessageStatus(messageId);\r\n            console.log(\"Checking message with messageId:\", messageId);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default checkVisibleMessages;","import { SelectorReferenceError, MissingElementError, ErrorReader} from \"./services/error-liblrary\";\r\n\r\nfunction carusel(elemSelector) {\r\n  if (!elemSelector) throw new SelectorReferenceError(\"Невірно вказаний, або відсутній селектор классу Каруселі\");\r\n\r\n  let elem = document.querySelector(elemSelector);\r\n  \r\n  try {\r\n    if (!elem) throw new MissingElementError(`Результат оброблення елемента - ${elem}`);\r\n\r\n    const flkty = new Flickity(elem, {\r\n      cellAlign: 'center',\r\n      contain: true,\r\n      wrapAround: true // Включаем бесконечную прокрутку\r\n  });\r\n\r\n  if (!flkty) new MissingElementError(`Результат оброблення елемента - ${flkty}`);\r\n  \r\n  } catch (err) {\r\n    if (err instanceof MissingElementError ) {\r\n      console.error(new  ErrorReader(\"Відсутній елемент: \" + err) );\r\n  } else if (err instanceof SelectorReferenceError ) {\r\n    console.error(new  ErrorReader(\"Помилка посилання: \" + err));\r\n  } else {\r\n    throw new Error(\"Невідома  помилка \" + err.stack)\r\n  }\r\n \r\n}\r\n\r\n      \r\n   \r\n}\r\n\r\nexport default carusel;\r\n\r\n\r\n","import {ChatSrollMeth, ChatJumpMEth, ChatTextAreaMeth, ChatFocusOn} from \"./chat-methods\";\r\nimport { SelectorReferenceError, ErrorReader } from \"./services/error-liblrary\";\r\n\r\nfunction chatObserv(chatContainer, textAreaContainer, jumpBtnSelector ) {\r\n      try {\r\n            if (chatContainer !== \".message-list\") {\r\n                  throw new SelectorReferenceError(`Відсутній селектор контейнера чату`);\r\n        } else if (textAreaContainer !== \"#textarea\") {\r\n                  throw new SelectorReferenceError(`Відсутній селектор елемента форми Textarea`);\r\n        }\r\n  \r\n          const scrollOobserver = new ChatSrollMeth(chatContainer, jumpBtnSelector),\r\n                jumpObserber = new ChatJumpMEth(chatContainer,jumpBtnSelector),\r\n                textAreaObserver = new ChatTextAreaMeth(textAreaContainer),\r\n                chatObserv = new ChatFocusOn(textAreaContainer, chatContainer);\r\n                \r\n  \r\n          scrollOobserver.getScrollPos();\r\n          scrollOobserver.setScrollPos();\r\n          scrollOobserver.showJumpToMessageBtn();\r\n          scrollOobserver.hideJumpToMessageBtn();\r\n        \r\n          jumpObserber.JumpTo();\r\n      \r\n          textAreaObserver.textAreaIncrisHeight();\r\n  \r\n          chatObserv.pemanentFocusOn();\r\n\r\n      } catch (err) {\r\n            if (err instanceof SyntaxError) {\r\n                 console.error(new ErrorReader(\"Помилка виконання \" + err));\r\n            } else if (err instanceof TypeError) {\r\n                  console.error( new ErrorReader(\"Помилка використання \" + err.stack));\r\n            } else if (err instanceof ReferenceError) {\r\n                  console.error(new ErrorReader(\"Помилка використання \" + err.stack));\r\n            } else {\r\n                  throw new Error(\"Невідома  помилка \" + err.stack)\r\n            }\r\n      }\r\n      \r\n}\r\n\r\nexport default chatObserv;","import {SelectorReferenceError} from \"./services/error-liblrary\";\r\n// Класс в якому я задав два метода для запоминанія позиції і її вивода\r\n// Я використав клас тому шо так намного проще передавати переменні внутрі двох функцій\r\n// В клас ми передаємо аргумент ( наш блок з смсками)\r\nclass ChatSrollMeth {\r\n    constructor(chatContainer, jumpBtnSelector) {\r\n        this.__noSuchMethod__ = function(name) {\r\n            throw new TypeError(`Метода в класі ${name} не існує`)\r\n        };  \r\n        this.chatContainer = chatContainer;\r\n    // перемєнна яка хранить начальну скрольну позицію\r\n        this.storagedScrollPos = 0;\r\n        this.chatBlock = document.querySelector(this.chatContainer);\r\n\r\n        // переменна у яку ми визиваєме дані про позицію з локального храниліща браузера\r\n        this.getSevedScrollTop = localStorage.getItem(\"chatScrollPos\");\r\n\r\n        // jumpToMessage variables \r\n        this.scrollPercentage = 0;\r\n        this.jumpBtn = document.querySelector(jumpBtnSelector);\r\n   \r\n    }\r\n\r\n    // метод для зчитуванія позиції активної зони юзера перед його виходом з блока\r\n    getScrollPos() {\r\n        // тут ми скролом зчитуємо позицію і передаємо її у локальноє храниліще браузера\r\n        this.chatBlock.addEventListener(\"scroll\", () => {\r\n             this.storagedScrollPos = this.chatBlock.scrollTop;\r\n             localStorage.setItem(\"chatScrollPos\", this.storagedScrollPos)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    // метод на перенос нас на сохраньонну позицію при откритії чата \r\n    setScrollPos() {\r\n        // тут ми провіряємо условія шо кіть у нас записано у локальноє храніліще дашо шо связано з нашим флагом \"chatScrollPos\" та товди\r\n        // подставити то значенія замість нашого актуалного СКРОЛЛ ТОП = перенести нас на нужні координати\r\n        if (this.getSevedScrollTop) {\r\n            this.chatBlock.scrollTop = this.getSevedScrollTop;\r\n        }\r\n    }\r\n\r\n    // метод за допомогою якого ми виводимо кнопку джамп\r\n    showJumpToMessageBtn() {\r\n        const getPercentage = () => {\r\n            // тут ми получаємо прогресс скролла нашої сторінки\r\n            this.scrollPercentage = Math.round((this.chatBlock.scrollTop / (this.chatBlock.scrollHeight - this.chatBlock.clientHeight)) * 100); \r\n            // якщо умова спрацьовує ми виводимо кнопку \r\n            if (this.scrollPercentage <= 80) {\r\n                this.jumpBtn.classList.remove(\"hiden\")\r\n            } \r\n        }\r\n\r\n        // тут ми накладаємо оброблювач подій \r\n        this.chatBlock.addEventListener(\"scroll\", getPercentage);\r\n    }\r\n\r\n // метод за допомогою якого ми приховуємо  кнопку джамп\r\n    hideJumpToMessageBtn() {\r\n        const getPercentage = () => {\r\n            // тут ми получаємо прогресс скролла нашої сторінки\r\n            this.scrollPercentage = Math.round((this.chatBlock.scrollTop / (this.chatBlock.scrollHeight - this.chatBlock.clientHeight)) * 100); \r\n            // якщо умова спрацьовує ми ховаємо кнопку \r\n            if (this.scrollPercentage >= 90 ) {\r\n                this.jumpBtn.classList.add(\"hiden\")\r\n            }\r\n        }\r\n\r\n        // тут ми накладаємо оброблювач подій \r\n        this.chatBlock.addEventListener(\"scroll\", getPercentage);   \r\n    }\r\n\r\n}\r\n\r\n\r\nclass ChatJumpMEth extends ChatSrollMeth {\r\n    constructor(chatContainer,jumpBtnSelector) {\r\n        super(chatContainer, jumpBtnSelector);\r\n        this.__noSuchMethod__ = function(name) {\r\n            throw new TypeError(`Метода в класі ${name} не існує`)\r\n        };  \r\n        this.chatBlock = document.querySelector(this.chatContainer);\r\n        this.otherMessages = document.querySelectorAll(\".other-message\");\r\n        this.isUnchecked = false;\r\n    }\r\n    \r\n    // метод який виконує дію стрибка\r\n    JumpTo() {\r\n        if (!this.jumpBtn) {\r\n            throw new ReferenceError('Помилка посилання')\r\n        }\r\n        // знизу до першої перевірки умови ми отримуємо наші смс та прапорець який ми використаємо аби виконати першу умову\r\n\r\n        this.otherMessages.forEach( otherMessage  => {\r\n            this.message = otherMessage.querySelector(\".unchecked\");\r\n\r\n            if (this.message) this.isUnchecked = true\r\n    })\r\n\r\n    // Якщо умова виконана тоді ми переносимося на непрочитану смск\r\n    if (this.isUnchecked) {\r\n        this.jumpBtn.addEventListener(\"click\", () => {\r\n           const message =  document.querySelector(\".other-message .unchecked\");\r\n\r\n           if (message)  message.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"center\"});\r\n        });\r\n        \r\n    }  else {\r\n    // Якщо умова не виконана тоді ми просто переносимося в кінець нашої сторінки\r\n        this.jumpBtn.addEventListener(\"click\", () => {\r\n            this.chatBlock.scrollTop = this.chatBlock.scrollHeight;\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    }   \r\n}\r\n\r\n\r\nclass ChatTextAreaMeth {\r\n    constructor(textareaSelector) {\r\n        this.__noSuchMethod__ = function(name) {\r\n            throw new TypeError(`Метода в класі ${name} не існує`)\r\n        };  \r\n        this.textAreablock = document.querySelector(textareaSelector);\r\n        \r\n\r\n    }\r\n\r\n\r\n    textAreaIncrisHeight() {      \r\n       \r\n            this.textAreablock.addEventListener(\"input\", (e) => {\r\n                if(e.target.value.length > 175)  {\r\n                    console.log('ff')\r\n                    e.target.style.height = \"auto\"\r\n                    e.target.style.height = (this.textAreablock.scrollHeight ) + \"px\" ;  \r\n                }\r\n                    \r\n        })\r\n\r\n\r\n        this.textAreablock.addEventListener(\"input\", (e) => {\r\n            // let contentLenght = e.target.value.length;\r\n            if (e.target.value.length === 175)  e.target.style.height = 60 + \"px\";\r\n                \r\n             if (e.target.value === \"\") e.target.style.height = \"\";\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nclass ChatFocusOn extends ChatTextAreaMeth {\r\n    constructor(textareaSelector, chatContainer) {\r\n        super(textareaSelector);\r\n        this.__noSuchMethod__ = function(name) {\r\n            throw new TypeError(`Метода в класі ${name} не існує`)\r\n        };  \r\n        this.textAreablock = document.querySelector(textareaSelector);\r\n        this.chatBlock = document.querySelector(chatContainer);\r\n    }\r\n\r\n    pemanentFocusOn() {\r\n        this.chatBlock.addEventListener(\"click\", () => {\r\n            this.textAreablock.focus()\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport  {ChatSrollMeth, ChatJumpMEth, ChatTextAreaMeth, ChatFocusOn};\r\n","\r\nfunction modalAction() {\r\n    function openModal(targetId) {\r\n        const modal = document.getElementById(targetId);\r\n        if (modal) {\r\n        modal.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n// Функция для закрытия модального окна\r\n    function closeModal(targetId) {\r\n        const modal = document.getElementById(targetId);\r\n        if (modal) {\r\n        modal.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n// Привязываем открытие и закрытие к соответствующим элементам\r\n    const openModalBtns = document.querySelectorAll(\".report-button\");\r\n    const closeBtns = document.querySelectorAll(\".close-btn\");\r\n\r\n    openModalBtns.forEach(function (openModalBtn) {\r\n        openModalBtn.addEventListener(\"click\", function () {\r\n        const targetId = openModalBtn.getAttribute(\"data-target\");\r\n        openModal(targetId);\r\n        });\r\n    });\r\n\r\n    closeBtns.forEach(function (closeBtn) {\r\n        closeBtn.addEventListener(\"click\", function () {\r\n            const targetId = closeBtn.getAttribute(\"data-target\");\r\n            closeModal(targetId);\r\n        });\r\n    });\r\n\r\n// Предотвращение взаимодействия пользователя с контентом за пределами окна\r\n    const modals = document.querySelectorAll(\".popup-block\");\r\n        modals.forEach(function (modal) {\r\n            modal.addEventListener(\"click\", function (event) {\r\n                if (event.target === modal) {\r\n                    const targetId = modal.getAttribute(\"id\");\r\n                    closeModal(targetId);\r\n                }\r\n        });\r\n    });\r\n}\r\n\r\nexport default modalAction;","import { SelectorReferenceError } from \"./services/error-liblrary\";\r\n// Це функція яка створює секцію після мейна та переміщає туди пагінацію, вона в самому початку файлу бо шось матюкаєся джс на перші дві строки після визова функції\r\nfunction paginationReplacement() {\r\n    try {\r\n        // Тут я звертаюся до потірбних мені блоків\r\n        const   section = document.createElement('section'),\r\n                main = document.querySelector('main'),\r\n                paginationWrap = document.querySelector('.pagination-wrap'),  \r\n        // Тут тіпа кажеся шо мож сразу чек прописувати у іф, но тоді воно починає матюкатися на іф і мені прийшлося створювати ще одну змінну\r\n                check = main.querySelector('.pagination-wrap');\r\n\r\n        //Перевірка -- якщо пагінація є в блоку мейн, тоді створити секцію і закинути в неї пагінацію .\r\n        if (check) {\r\n            main.insertAdjacentElement('afterend', section);\r\n            section.insertAdjacentElement('afterbegin', paginationWrap);\r\n        }\r\n\r\n\r\n        if (!section  || !main || !paginationWrap) {\r\n            throw new SelectorReferenceError('Блоки DOM-Tree не знайдено. Неможливо виконати функцію переміщення пагінації')\r\n          }\r\n          \r\n    } catch(e) {\r\n        console.error(e.message)\r\n      } \r\n  }\r\n\r\n  export default paginationReplacement;","import { SelectorReferenceError } from \"./services/error-liblrary\";\r\n\r\n \r\n function keyModyfier(form) {\r\n    if (form !== \".bottom form\") {\r\n        throw new SelectorReferenceError(\"Невірно вказаний селектор форми\")\r\n    }\r\n\r\n    try {\r\n        const formBlock = document.querySelector(form);\r\n        formBlock.addEventListener(\"keydown\", (e) => {\r\n            if (e.code === \"Enter\") {\r\n    \r\n                        formBlock.submit();\r\n            }\r\n        })\r\n    } catch {\r\n        \r\n    }\r\n   \r\n }\r\n\r\nexport default keyModyfier;","// Класс для читача помилок \r\nclass ErrorReader extends Error {\r\n    constructor(message,cause) {\r\n        super(message);\r\n        this.name = \"ErrorReader\";\r\n        this.cause = cause;\r\n    }\r\n}\r\n\r\n// Класс для помилок посилання\r\nclass ReferenceError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n    }\r\n}\r\n//  Класс для помилок посилання на селектор\r\nclass SelectorReferenceError extends ReferenceError {\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\n\r\n// Класс для помилок типу Null || Undefined\r\n\r\nclass MissingElementError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n    }\r\n}\r\n\r\n// Класс для помилок невірного використання методів\r\nclass SyntaxError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n    }\r\n}\r\n\r\n\r\nexport {SelectorReferenceError, MissingElementError,ErrorReader, SyntaxError}","'use strict'\r\n\r\nfunction userIMg() {\r\n  try {\r\n    var imagePreview = document.getElementById('image-preview');\r\n    var cropButton = document.getElementById('crop-button');\r\n    \r\n    if (imagePreview && cropButton) {\r\n      imagePreview.style.display = 'none';\r\n      cropButton.style.display = 'none';\r\n    }\r\n    \r\n    var userIdInput = document.getElementById('userId');\r\n    if(userIdInput)\r\n    {\r\n      var userId = userIdInput.value;\r\n    }\r\n    \r\n    \r\n    document.getElementById('image-input').addEventListener('change', function(event) {\r\n      var file = event.target.files[0];\r\n      var reader = new FileReader();\r\n    \r\n      reader.onload = function(e) {\r\n        // Показываем нужные элементы\r\n        document.getElementById('image-preview').style.display = 'block';\r\n        document.getElementById('crop-button').style.display = 'block';\r\n    \r\n        document.getElementById('user-image').style.display = 'none';\r\n        document.getElementById('add-img').style.display = 'none';\r\n        // Установка изображения в Cropper.js\r\n        cropper.replace(e.target.result);\r\n      };\r\n    \r\n      reader.readAsDataURL(file);\r\n    });\r\n    \r\n    // Остальной код остается без изменений\r\n    var image = document.getElementById('image-preview');\r\n    var cropper = new Cropper(image, {\r\n      aspectRatio: 1,\r\n      crop: function(event) {\r\n        // Обработчик события обрезки изображения\r\n      },\r\n      zoomable: false\r\n    });\r\n    \r\n    document.getElementById('crop-button').addEventListener('click', function() {\r\n      var croppedCanvas = cropper.getCroppedCanvas();\r\n      var roundedCanvas = document.createElement('canvas');\r\n      var roundedContext = roundedCanvas.getContext('2d');\r\n      var radius = croppedCanvas.width / 2;\r\n      roundedCanvas.width = croppedCanvas.width;\r\n      roundedCanvas.height = croppedCanvas.height;\r\n      roundedContext.clearRect(0, 0, roundedCanvas.width, roundedCanvas.height);\r\n      roundedContext.beginPath();\r\n      roundedContext.arc(radius, radius, radius, 0, 2 * Math.PI);\r\n      roundedContext.closePath();\r\n      roundedContext.clip();\r\n      roundedContext.drawImage(croppedCanvas, 0, 0, croppedCanvas.width, croppedCanvas.height);\r\n      var croppedImageURL = roundedCanvas.toDataURL('image/png');\r\n      var croppedImageInput = document.getElementById('cropped-image');\r\n      croppedImageInput.value = croppedImageURL;\r\n      var fileInput = document.getElementById('image-input');\r\n      fileInput.value = null;\r\n    \r\n      // Скрываем блоки с обрезанным изображением\r\n      // document.querySelector('.cropper-container').style.display = 'none';\r\n      // document.getElementById('crop-button').style.display = 'none';\r\n    \r\n      // Отправляем форму\r\n      var form = document.getElementById('load-img');\r\n      form.submit();\r\n    });\r\n    \r\n  } catch {\r\n\r\n  }\r\n}\r\n\r\nexport default  userIMg;\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import carusel from \"./modules/carusel\";\r\nimport userIMg from \"./modules/user_img\";\r\nimport paginationReplacement from \"./modules/pagination-replacement\";\r\nimport keyModyfier from \"./modules/send-message-methods\";\r\nimport chatObserv from \"./modules/chat-action\";\r\nimport checkVisibleMessages from \"./modules/Up-date-messages\";\r\nimport modalAction from \"./modules/modal-action\";\r\nimport { MissingElementError, SelectorReferenceError, ErrorReader} from \"./modules/services/error-liblrary\";\r\n\r\n// Ініціалізація методів глобального обьекта\r\nwindow.addEventListener(\"load\", checkVisibleMessages);\r\nwindow.addEventListener(\"DOMContentLoaded\", (e) => {\r\n\r\n\r\n    try {\r\n        // Отправляем AJAX-запросы для видимых сообщений при загрузке страницы\r\n        // Отправляем AJAX-запросы для видимых сообщений при скроллинге в области \"message-list\"\r\n        document.getElementById(\"message-list\").addEventListener(\"scroll\", checkVisibleMessages);\r\n    } catch (err) {\r\n\r\n    }\r\n\r\n    try {\r\n        // Ініціалізація модулів\r\n        carusel(\".main-carousel\");\r\n        checkVisibleMessages();\r\n        userIMg();\r\n        paginationReplacement();\r\n        keyModyfier(\".bottom form\");\r\n        chatObserv(\".message-list\",\"#textarea\", \".jump-btn\");\r\n        modalAction();\r\n        \r\n    } finally {\r\n        console.log(\"All methods works properly\")\r\n    }\r\n\r\n})\r\n\r\n"],"names":[],"sourceRoot":""}