{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;;;;;;ACxDkB;AACrD;AACA;AACA,yBAAyB,+DAAa;AACtC;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU;;;;;;;;;;;;;;;ACTzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa;;;;;;;;;;ACzC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,EAAE,iEAAe,qBAAqB;;;;;;;;;;;;;;;;ACrBtC,CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;;;;;ACZ1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,iEAAe,QAAQ;;;;;;;;;;;;;;;ACVf;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iEAAgB,OAAO,EAAC;AACxB;;;;;;;UCjFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNiD;AACR;AAC4B;AACZ;AACA;AACK;AAC9D;AACA,gCAAgC,iEAAoB;AACpD;AACA;AACA;AACA;AACA,mEAAmE,iEAAoB;AACvF;AACA;AACA,IAAI,4DAAW;AACf,IAAI,6DAAO;AACX,IAAI,2EAAqB;AACzB;AACA,IAAI,yEAAW;AACf,IAAI,2EAAU;AACd;AACA,CAAC,C","sources":["webpack:///./assets/js/modules/Up-date-messages.js","webpack:///./assets/js/modules/chat-scrolling-action.js","webpack:///./assets/js/modules/chat-scrolling-methods.js","webpack:///./assets/js/modules/modal-action.js","webpack:///./assets/js/modules/pagination-replacement.js","webpack:///./assets/js/modules/send-message-methods.js","webpack:///./assets/js/modules/services/post-data.js","webpack:///./assets/js/modules/user_img.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./assets/js/modul-colector.js"],"sourcesContent":["\r\n// Функция, которая отправляет AJAX-запрос для обновления статуса сообщения\r\nfunction updateMessageStatus(messageId) {\r\n    const xhr = new XMLHttpRequest();\r\n    const currentUrl = window.location.href;\r\n\r\n    xhr.open(\"POST\", currentUrl, true); // Замените на URL вашего серверного скрипта\r\n    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n    xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4 && xhr.status === 200) {\r\n            const response = xhr.responseText;\r\n            if (xhr.status === 200) {\r\n                // Если запрос успешен, изменяем класс на \"checked\"\r\n                console.log(\"ok\")\r\n                const message = document.getElementById(messageId);\r\n                if (message) {\r\n                    const span = message.querySelector(\".unchecked\");\r\n                    if (span) {\r\n                        span.classList.remove(\"unchecked\");\r\n                        span.classList.add(\"checked\");\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Response from server:\", response);\r\n            }\r\n        }\r\n    };\r\n    xhr.send(\"messageId=\" + messageId);\r\n}\r\n\r\n// Функция, которая проверяет видимые сообщения и отправляет AJAX-запросы при скроллинге\r\nfunction checkVisibleMessages() {\r\n    const messageList = document.getElementById(\"message-list\");\r\n    if (!messageList) return; // Проверка на наличие списка сообщений\r\n\r\n    const otherMessages = messageList.querySelectorAll(\".other-message\");\r\n\r\n    otherMessages.forEach(function(otherMessage) {\r\n        const message = otherMessage.querySelector(\".unchecked\");\r\n        if (!message) return; // Пропускаем, если нет span с классом \"unchecked\"\r\n        \r\n        const messageId = otherMessage.id;\r\n        const rect = otherMessage.getBoundingClientRect();\r\n        \r\n\r\n        if (rect.top >= 0 && rect.bottom <= (messageList.clientHeight + messageList.getBoundingClientRect().top)) {\r\n            // Если сообщение видимо в области, отправляем AJAX-запрос\r\n            updateMessageStatus(messageId);\r\n            console.log(\"Checking message with messageId:\", messageId);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default checkVisibleMessages;","import ChatSrollMeth from \"./chat-scrolling-methods\";\r\n\r\nfunction chatObserv(chatContainer) {\r\n    const observer = new ChatSrollMeth(chatContainer)\r\n\r\n    observer.getScrollPos();\r\n    observer.setScrollPos();\r\n}\r\n\r\nexport default chatObserv;","\r\n// Класс в якому я задав два метода для запоминанія позиції і її вивода\r\n// Я використав клас тому шо так намного проще передавати переменні внутрі двох функцій\r\n// В клас ми передаємо аргумент ( наш блок з смсками)\r\nclass ChatSrollMeth {\r\n    constructor(chatContainer) {\r\n        this.chatContainer = chatContainer;\r\n    // перемєнна яка хранить начальну скрольну позицію\r\n        this.storagedScrollPos = 0;\r\n        this.chatBlock = document.querySelector(this.chatContainer);\r\n\r\n        // переменна у яку ми визиваєме дані про позицію з локального храниліща браузера\r\n        this.getSevedScrollTop = localStorage.getItem(\"chatScrollPos\");\r\n      \r\n    }\r\n\r\n    // метод для зчитуванія позиції активної зони юзера перед його виходом з блока\r\n    getScrollPos() {\r\n        // тут ми скролом зчитуємо позицію і передаємо її у локальноє храниліще браузера\r\n        this.chatBlock.addEventListener(\"scroll\", () => {\r\n             this.storagedScrollPos = this.chatBlock.scrollTop;\r\n             localStorage.setItem(\"chatScrollPos\", this.storagedScrollPos)\r\n             console.log(this.storagedScrollPos)\r\n            \r\n        })\r\n\r\n        console.log(this.storagedScrollPos)\r\n    }\r\n\r\n    // метод на перенос нас на сохраньонну позицію при откритії чата \r\n    setScrollPos() {\r\n        // тут ми провіряємо условія шо кіть у нас записано у локальноє храніліще дашо шо связано з нашим флагом \"chatScrollPos\" та товди\r\n        // подставити то значенія замість нашого актуалного СКРОЛЛ ТОП = перенести нас на нужні координати\r\n        if (this.getSevedScrollTop) {\r\n            this.chatBlock.scrollTop = this.getSevedScrollTop;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ChatSrollMeth;","// 'use strict'\r\n\r\n// function modalAction() {\r\n//     try {\r\n       \r\n  \r\n//         //report popup\r\n        \r\n        \r\n    \r\n//   });\r\n//     } catch {\r\n\r\n//     }\r\n// }\r\n\r\n// export default modalAction;","'use strict'\r\n// Це функція яка створює секцію після мейна та переміщає туди пагінацію, вона в самому початку файлу бо шось матюкаєся джс на перші дві строки після визова функції\r\nfunction paginationReplacement() {\r\n    try {\r\n        // Тут я звертаюся до потірбних мені блоків\r\n        const section = document.createElement('section'),\r\n        main = document.querySelector('main'),\r\n        paginationWrap = document.querySelector('.pagination-wrap'),  \r\n        // Тут тіпа кажеся шо мож сразу чек прописувати у іф, но тоді воно починає матюкатися на іф і мені прийшлося створювати ще одну змінну\r\n        check = main.querySelector('.pagination-wrap') \r\n\r\n        //Перевірка -- якщо пагінація є в блоку мейн, тоді створити секцію і закинути в неї пагінацію .\r\n        if (check) {\r\n            main.insertAdjacentElement('afterend', section);\r\n            section.insertAdjacentElement('afterbegin', paginationWrap);\r\n        }\r\n    } catch {\r\n\r\n    }\r\n  }\r\n\r\n  export default paginationReplacement;"," import postData from \"./services/post-data\";\r\n \r\n function keyModyfier(form) {\r\n    const formBlock = document.querySelector(form);\r\n    formBlock.addEventListener(\"keydown\", (e) => {\r\n        if (e.code === \"Enter\") {\r\n\r\n                    formBlock.submit();\r\n        }\r\n    })\r\n }\r\n\r\nexport default keyModyfier;","    \r\nasync function postData(url = \"\", data) {\r\n await fetch(url, {\r\n        method: \"POST\",\r\n        body: data\r\n    })\r\n}\r\n\r\n\r\n\r\n    export default postData;","'use strict'\r\n\r\nfunction userIMg() {\r\n  try {\r\n    var imagePreview = document.getElementById('image-preview');\r\n    var cropButton = document.getElementById('crop-button');\r\n    \r\n    if (imagePreview && cropButton) {\r\n      imagePreview.style.display = 'none';\r\n      cropButton.style.display = 'none';\r\n    }\r\n    \r\n    var userIdInput = document.getElementById('userId');\r\n    if(userIdInput)\r\n    {\r\n      var userId = userIdInput.value;\r\n    }\r\n    \r\n    \r\n    document.getElementById('image-input').addEventListener('change', function(event) {\r\n      var file = event.target.files[0];\r\n      var reader = new FileReader();\r\n    \r\n      reader.onload = function(e) {\r\n        // Показываем нужные элементы\r\n        document.getElementById('image-preview').style.display = 'block';\r\n        document.getElementById('crop-button').style.display = 'block';\r\n    \r\n        document.getElementById('user-image').style.display = 'none';\r\n        document.getElementById('add-img').style.display = 'none';\r\n        // Установка изображения в Cropper.js\r\n        cropper.replace(e.target.result);\r\n      };\r\n    \r\n      reader.readAsDataURL(file);\r\n    });\r\n    \r\n    // Остальной код остается без изменений\r\n    var image = document.getElementById('image-preview');\r\n    var cropper = new Cropper(image, {\r\n      aspectRatio: 1,\r\n      crop: function(event) {\r\n        // Обработчик события обрезки изображения\r\n      },\r\n      zoomable: false\r\n    });\r\n    \r\n    document.getElementById('crop-button').addEventListener('click', function() {\r\n      var croppedCanvas = cropper.getCroppedCanvas();\r\n      var roundedCanvas = document.createElement('canvas');\r\n      var roundedContext = roundedCanvas.getContext('2d');\r\n      var radius = croppedCanvas.width / 2;\r\n      roundedCanvas.width = croppedCanvas.width;\r\n      roundedCanvas.height = croppedCanvas.height;\r\n      roundedContext.clearRect(0, 0, roundedCanvas.width, roundedCanvas.height);\r\n      roundedContext.beginPath();\r\n      roundedContext.arc(radius, radius, radius, 0, 2 * Math.PI);\r\n      roundedContext.closePath();\r\n      roundedContext.clip();\r\n      roundedContext.drawImage(croppedCanvas, 0, 0, croppedCanvas.width, croppedCanvas.height);\r\n      var croppedImageURL = roundedCanvas.toDataURL('image/png');\r\n      var croppedImageInput = document.getElementById('cropped-image');\r\n      croppedImageInput.value = croppedImageURL;\r\n      var fileInput = document.getElementById('image-input');\r\n      fileInput.value = null;\r\n    \r\n      // Скрываем блоки с обрезанным изображением\r\n      // document.querySelector('.cropper-container').style.display = 'none';\r\n      // document.getElementById('crop-button').style.display = 'none';\r\n    \r\n      // Отправляем форму\r\n      var form = document.getElementById('load-img');\r\n      form.submit();\r\n    });\r\n    \r\n  } catch {\r\n\r\n  }\r\n}\r\n\r\nexport default  userIMg;\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import modalAction from \"./modules/modal-action\";\r\nimport userIMg from \"./modules/user_img\";\r\nimport paginationReplacement from \"./modules/pagination-replacement\";\r\nimport keyModyfier from \"./modules/send-message-methods\";\r\nimport chatObserv from \"./modules/chat-scrolling-action\";\r\nimport checkVisibleMessages from \"./modules/Up-date-messages\";\r\n\r\nwindow.addEventListener(\"load\", checkVisibleMessages);\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", (e) => {\r\n    // Отправляем AJAX-запросы для видимых сообщений при загрузке страницы\r\n// Отправляем AJAX-запросы для видимых сообщений при скроллинге в области \"message-list\"\r\ndocument.getElementById(\"message-list\").addEventListener(\"scroll\", checkVisibleMessages);\r\n\r\n\r\n    modalAction();\r\n    userIMg();\r\n    paginationReplacement();\r\n\r\n    keyModyfier(\".bottom form\")\r\n    chatObserv(\".message-list\")\r\n\r\n})"],"names":[],"sourceRoot":""}